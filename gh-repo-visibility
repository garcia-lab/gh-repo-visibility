#!/usr/bin/env bash
################################################################################
################################################################################
####### Sync or update repository visibilty ####################################
################################################################################
################################################################################

# LEGEND:
# This script is used by the gh command line to help sync or update the
# visibility of repositories. If no inpput file is provided, it will sync the
# visibility of all repositories. If an input file is provided, it will update
# the visibility of all repositories in the input file.

#
# PREREQS:
# You need to have the following to run this script successfully:
# - GitHub Personal Access Token with a scope of "repos" and access to the organization(s) that will be updated.
# - Either the name of the organizations to be synced, or a file containing the names of the repositories to be updated
# - jq installed on the machine running the query
#
# NOTES:
# Input file should be in the format:
# Org_Name/Repo_Name1,public,false
# Org_Name/Repo_Name2,internal,false
# Org_Name/Repo_Name3,private,true
#
# It can handle multiple organizations and repositories.
# The last field in the input file is the isTemplate and is a boolean true or false.
# The script will still run if completly missing the isTemplate field.

################################################################################
#### Function PrintUsage #######################################################
PrintUsage()
{
  cat <<EOM
Usage: gh repo-visibility [options]

Options:
    -h, --help                    : Show script help
    -d, --debug                   : Enable Debug logging
    -i, --input                   : Set path to a file with a list of Org/Repo,visibility,template to update, one per line
    -dt, --destination-token      :  Set Personal Access Token with repo scope to destination Organization
    -st, --source-token           : Set Personal Access Token with repo scope to original Organization
    -p, --repo-page-size          : Set the pagination size for the initial repository GraphQL query - defaults to 20
                                    If a timeout occurs, reduce this value
    
    -so, --source-org             : Name of the source GitHub Organization to be analyzed
    -do, --destination-org        : Name of the destination GitHub Organization to be updated

Description:
repo-visibilty scans a source organization or input file for all repositories and gathers their visibilty.
  It then updates the visibilty of all repositories in the destination organization.

Example:
  gh repo-visibility --source-org OriginalOrg --destination-org MyNewOrg --source-token ABCDEFG1234567 --destination-token 1234567ABCDEFG

EOM
  exit 0
}
####################################
# Read in the parameters if passed #
####################################
PARAMS=""
while (( "$#" )); do
  case "$1" in
    -h|--help)
      PrintUsage;
      ;;
    -d|--debug)
      DEBUG=true
      shift
      ;;
    -dt|--destination-token)
      DESTINATION_TOKEN=$2
      shift 2
      ;;
    -st|--source-token)
      SOURCE_TOKEN=$2
      shift 2
      ;;
    -i|--input)
      INPUT_FILE_NAME=$2
      shift 2
      ;;
    -p|--repo-page-size)
      REPO_PAGE_SIZE=$2
      shift 2
      ;;
    -do|--destination-org)
      DESTINATION_ORG_NAME=$2
      shift 2
      ;;
    -so|--source-org)
      SOURCE_ORG_NAME=$2
      shift 2
      ;;
    --) # end argument parsing
      shift
      break
      ;;
    -*) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
  PARAMS="$PARAMS $1"
  shift
  ;;
  esac
done

##################################################
# Set positional arguments in their proper place #
##################################################
eval set -- "$PARAMS"

############
# Defaults #
############
REPO_PAGE_SIZE="${REPO_PAGE_SIZE:-100}" # Default to 100 if not passed
SOURCE_END_CURSOR='null'                # Set to null, will be updated after call
DESTINATION_END_CURSOR='null'           # Set to null, will be updated after call
###########
# GLOBALS #
###########
SOURCE_REPO_ARRAY=()      # Array of source repo names
DESTINATION_REPO_ARRAY=() # Array of destination repo names
UPDATE_REPO_ARRAY=()      # Array of repo names to update

################################################################################
############################ FUNCTIONS #########################################
################################################################################
################################################################################
################################################################################
#### Function DebugJQ ##########################################################
DebugJQ() {
  # If Debug is on, print it out...
  if [[ ${DEBUG} == true ]]; then
    echo "$1" | jq '.'
  fi
}
################################################################################
#### Function Debug ############################################################
Debug() {
  # If Debug is on, print it out...
  if [[ ${DEBUG} == true ]]; then
    echo "$1"
  fi
}
################################################################################
#### Function Header ###########################################################
Header() {
  echo ""
  echo "######################################################"
  echo "######################################################"
  echo "########## GitHub repo visibilty updater #############"
  echo "######################################################"
  echo "######################################################"
  echo ""

  ###########################################
  # Make lower case to prevent weird issues #
  ###########################################
  DESTINATION_ORG_NAME=$(echo "${DESTINATION_ORG_NAME}" | tr '[:upper:]' '[:lower:]')
  SOURCE_ORG_NAME=$(echo "${SOURCE_ORG_NAME}" | tr '[:upper:]' '[:lower:]')

  # Print the organizations being synced if debug
  echo "Syncing ${SOURCE_ORG_NAME} repository visibility to ${DESTINATION_ORG_NAME}"
  echo ""

  # Debug info
  Debug "Source Token: ${SOURCE_TOKEN}"
  Debug "Destination Token: ${DESTINATION_TOKEN}"
  Debug "Source Organization: ${SOURCE_ORG_NAME}"
  Debug "Destination Organization: ${DESTINATION_ORG_NAME}"
  Debug "Repo Page Size: ${REPO_PAGE_SIZE}"
  Debug "Input File: ${INPUT_FILE_NAME}"
}
################################################################################
#### Function Footer ###########################################################
Footer() {
  #######################################
  # Basic footer information and totals #
  #######################################
  echo ""
  echo "######################################################"
  echo "The script has completed"
  echo "######################################################"
  echo ""
}
################################################################################
#### Function ValidateJQ #######################################################
ValidateJQ() {
  # Need to validate the machine has jq installed as we use it to do the parsing
  # of all the json returns from GitHub

  if ! jq --version &>/dev/null
  then
    echo "Failed to find jq in the path!"
    echo "If this is a Mac, run command: brew install jq"
    echo "If this is Debian, run command: sudo apt install jq"
    echo "If this is Centos, run command: yum install jq"
    echo "Once installed, please run this script again."
    exit 1
  fi
}
################################################################################
#### Function UpdateRepoVisibility #############################################
UpdateRepoVisibility() {
  # Pull in vars from the function call
  ORG_NAME="$1"
  REPO_NAME="$2"
  VISIBILITY="$3"
  TEMPLATE="$4"

  echo "----------------------------------------------------"
  echo "Updating visibility of ${ORG_NAME}/${REPO_NAME} to ${VISIBILITY}"
  echo "Setting Template to ${TEMPLATE}"
  # Call the GitHub API to update the visibility of the repo
  UPDATE_CMD=$(curl --fail -s -X PATCH \
    -H "Authorization: token ${DESTINATION_TOKEN}" \
    -d "{\"visibility\": \"${VISIBILITY}\", \"isTemplate\": \"${TEMPLATE}\"}" \
    https://api.github.com/repos/${ORG_NAME}/${REPO_NAME} 2>&1)
  
  #######################
  # Load the error code #
  #######################
  ERROR_CODE=$?

  ##########################
  # Check the shell return #
  ##########################
  if [ $ERROR_CODE -ne 0 ]; then
    echo "ERROR! Failed to update data from GitHub!"
    echo "ERROR:[${UPDATE_CMD}]"
    exit 1
  else
    echo "Successfully updated data on GitHub!"
  fi
}
################################################################################
#### Function GetAllSourceRepos ################################################
GetAllSourceRepos() {
   # Pull in vars from the function call
  ORG_NAME="$1"

  Debug "Getting all source repos for ${ORG_NAME}"
  Debug "SOURCE_END_CURSOR: ${SOURCE_END_CURSOR}"

  # Get the data block from the GitHub API
  DATA_BLOCK=$(curl --fail -s -X POST \
    --url https://api.github.com/graphql \
    -H 'Accept: application/vnd.github.starfire-preview+json' \
    -H "Authorization: Bearer ${SOURCE_TOKEN}" \
    -H 'Content-Type: application/json' \
    -d "{\"query\":\"query {organization(login: \"${SOURCE_ORG_NAME}\") {repositories(first: ${REPO_PAGE_SIZE}, after: ${SOURCE_END_CURSOR}) {nodes {nameWithOwner visibility isTemplate}totalCount pageInfo {hasNextPage endCursor}}}}\"}" 2>&1)
  

  #######################
  # Load the error code #
  #######################
  ERROR_CODE=$?

  ##########################
  # Check the shell return #
  ##########################
  if [ $ERROR_CODE -ne 0 ]; then
    echo "ERROR! Failed to gather data from GitHub!"
    exit 1
  fi

  # Get the next page and end cursor
  NEXT_PAGE=$(echo "$DATA_BLOCK" | jq .[] | jq -r '.organization.repositories.pageInfo.hasNextPage')
  SOURCE_END_CURSOR=$(echo "$DATA_BLOCK" | jq .[] | jq -r '.organization.repositories.pageInfo.endCursor')

  # Debug info
  Debug "DATA_BLOCK: ${DATA_BLOCK}"
  Debug "NEXT_PAGE: ${NEXT_PAGE}"
  Debug "SOURCE_END_CURSOR: ${SOURCE_END_CURSOR}"

  #############################################
  # Parse all the repo data out of data block #
  #############################################
  ParseSourceRepoData "$DATA_BLOCK"

  ########################################
  # See if we need to loop for more data #
  ########################################
  if [ "$NEXT_PAGE" == "false" ]; then
    # We have all the data, we can move on
    echo "Gathered all data from source GitHub Organization"
  elif [ "$NEXT_PAGE" == "true" ]; then
    # We need to loop through GitHub to get all repos
    echo "More pages of repos... Looping through data with new cursor:[$SOURCE_END_CURSOR]"
    ######################################
    # Call GetData again with new cursor #
    ######################################
    GetAllSourceRepos
  else
    # Failing to get this value means we didnt get a good response back from GitHub
    # And it could be bad input from user, not enough access, or a bad token
    # Fail out and have user validate the info
    echo ""
    echo "######################################################"
    echo "ERROR! Failed response back from GitHub!"
    echo "Please validate your PAT, Organization, and access levels!"
    echo "######################################################"
    exit 1
  fi
}
################################################################################
#### Function ParseSourceRepoData ##############################################
ParseSourceRepoData() {
  # Pull in the repos data block
  PARSE_DATA=$1
  # Convert the format to JSON
  _jq() {
    echo -n "${PARSE_DATA}" | base64 --decode | jq -r "${1}"
  }

  REPOS=$(echo "${PARSE_DATA}" | jq -r '.data.organization.repositories.nodes')
  for REPO_DATA in $(echo -n "${REPOS}" | jq -r '.[] | @base64'); do
    _jq() {
    echo -n "${REPO_DATA}" | base64 --decode | jq -r "${1}"
    }
    # Build out the vars for the function
    REPO_NAME=$(_jq '.nameWithOwner' | tr '[:upper:]' '[:lower:]')
    VISIBILITY=$(_jq '.visibility')
    TEMPLATE=$(_jq '.isTemplate')
    # Debug info
    Debug "Repo Name: ${REPO_NAME}"
    Debug "Visibility: ${VISIBILITY}"
    Debug "Template: ${TEMPLATE}"
    # Push the vars to the SOURCE_REPO_ARRAY
    SOURCE_REPO_ARRAY+=("${REPO_NAME}|${VISIBILITY}|${TEMPLATE}")
  done
}
################################################################################
#### Function GetAllDestinationRepos ###########################################
GetAllDestinationRepos() {
   # Pull in vars from the function call
  ORG_NAME="$1"
}
################################################################################
#### Function ValidateArgs #####################################################
ValidateArgs() {
  # Check if user has provided the required arguments
  # Check if user has passed input file
  if [ -n "${INPUT_FILE}" ]; then
    # user passed input file, need to see if we have destination token
    if [ -z "${DESTINATION_TOKEN}" ]; then
      # user did not pass destination token, fail out
      echo "ERROR! You must provide a destination token to update the Destination Organization!"
      exit 1
    fi
  else
    # We need both source and org vars
    if [ -z "${SOURCE_ORG_NAME}" ] || [ -z "${SOURCE_TOKEN}" ] || [ -z "${DESTINATION_ORG_NAME}" ] || [ -z "${DESTINATION_TOKEN}" ]; then
      echo "ERROR! You must provide [--destination-token --source-token --destination-org --source-org] to query and update!"
      exit 1
    fi
  fi
}
################################################################################
############################## MAIN ############################################
################################################################################

##########
# Header #
##########
Header

#####################################
# Validate we have enough arguments #
#####################################
ValidateArgs

#########################
# Validate JQ installed #
#########################
ValidateJQ

#####################################
# Check if were using an input file #
#####################################
if [[ -n "${INPUT_FILE_NAME}" ]]; then
  # Read in the input file and parse the lines
  while read -r line; do
    #############################################
    # Split the line into the org and repo name #
    #############################################
    DESTINATION_ORG_NAME=$(echo "${line}" | cut -d'/' -f1)
    DESTINATION_REPO_NAME=$(echo "${line}" | cut -d'/' -f2)
    VISIBILITY=$(echo "${line}" | cut -d',' -f3)
    TEMPLATE=$(echo "${line}" | cut -d',' -f4)
    if [ -z "${TEMPLATE}" ]; then
      TEMPLATE="false"
    fi

    #####################################
    # Update the visibility of the repo #
    #####################################
    UpdateRepoVisibility "${DESTINATION_ORG_NAME}" "${DESTINATION_REPO_NAME}" "${VISIBILITY}" "${TEMPLATE}"
  done < "${INPUT_FILE_NAME}"
else
  #########################################
  # Get the list of all repos in the orgs #
  #########################################
  GetAllSourceRepos "${SOURCE_ORG_NAME}"
  GetAllDestinationRepos "${DESTINATION_ORG_NAME}"
  ###############################################################
  # Loop through the repos and generate list of repos to update #
  ###############################################################
  GenerateUpdateList
  # Loop through the list of repos and update the visibility
  for OBJECT in "${UPDATE_REPO_ARRAY[@]}"; do
    # Get the vars from the string
    DESTINATION_ORG_NAME=$(echo "${OBJECT}" | cut -d'/' -f1)
    DESTINATION_REPO_NAME=$(echo "${OBJECT}" | cut -d'/' -f2)
    VISIBILITY=$(echo "${OBJECT}" | cut -d',' -f3)
    TEMPLATE=$(echo "${OBJECT}" | cut -d',' -f4)
    # run the update
    UpdateRepoVisibility "${DESTINATION_ORG_NAME}" "${DESTINATION_REPO_NAME}" "${VISIBILITY}" "${TEMPLATE}"
  done
fi

##########
# Footer #
##########
Footer